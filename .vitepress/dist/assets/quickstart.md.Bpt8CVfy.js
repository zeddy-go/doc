import{_ as s,c as e,o as a,a2 as n}from"./chunks/framework.C9InrCCS.js";const m=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{},"headers":[],"relativePath":"quickstart.md","filePath":"quickstart.md"}'),i={name:"quickstart.md"},t=n(`<h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">â€‹</a></h1><p>Here are some project examples for you to get started quickly. In theory, as long as the app package can run the framework modules you define, any directory structure is feasible.</p><h2 id="http-service" tabindex="-1">HTTP Service <a class="header-anchor" href="#http-service" aria-label="Permalink to &quot;HTTP Service&quot;">â€‹</a></h2><p>Clone the code to your local machine:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --single-branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:zeddy-go/quickstart.git</span></span></code></pre></div><p>We can see the following directory structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>â”œâ”€â”€ conf                       // Configuration</span></span>
<span class="line"><span>â”‚   â”œâ”€â”€ config.go</span></span>
<span class="line"><span>â”‚   â””â”€â”€ config.yaml</span></span>
<span class="line"><span>â”œâ”€â”€ go.mod</span></span>
<span class="line"><span>â”œâ”€â”€ go.sum</span></span>
<span class="line"><span>â”œâ”€â”€ main.go                     // Entry file</span></span>
<span class="line"><span>â””â”€â”€ module                      // Modules</span></span>
<span class="line"><span>    â””â”€â”€ user                    // User module</span></span>
<span class="line"><span>        â”œâ”€â”€ iface               // Interface layer</span></span>
<span class="line"><span>        â”‚     â””â”€â”€ http          // HTTP interface</span></span>
<span class="line"><span>        â”‚         â””â”€â”€ user.go   // User handler</span></span>
<span class="line"><span>        â””â”€â”€ module.go           // Module entry</span></span></code></pre></div><p>We use the <code>embed</code> method to load configurations, then make changes to the configurations through environment variables. This approach is very convenient for containerized deployment scenarios.</p><p>We reference the <code>ginx</code> module and the <code>user</code> module. The <code>ginx</code> module is a built-in framework module that handles HTTP requests, using <code>gin</code> at the bottom layer.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use any HTTP library you like to write your own HTTP processing module. Or you can reinvent the wheel ðŸ’¯.</p></div><p>The <code>user</code> module is our own business module. The <code>user</code> module implements a handler method that outputs a JSON response of &quot;hello xxxx!&quot; when it receives a request (<code>module/user/iface/http/user.go</code>). Then, it registers a route with the <code>ginx</code> module to handle the corresponding requests (<code>module/user/module.go:30</code>).</p><p>Here you will notice the <code>container.Invoke</code> method. Yes, the framework uses dependency injection (we are trying to find a balance between development efficiency and execution efficiency).</p><p>The object instantiation method is bound in the <code>Init</code> method mentioned above (<code>module/user/module.go:21</code>).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Please bind the instantiation method in the <code>Init</code> method, and use them in the <code>Boot</code> method or elsewhere.</p></div><p>Start the service with <code>go run .</code>, then access <code>http://localhost:8080/hello?username=zed</code>.</p><h2 id="more-complete-example" tabindex="-1">More Complete Example <a class="header-anchor" href="#more-complete-example" aria-label="Permalink to &quot;More Complete Example&quot;">â€‹</a></h2><p>Clone the code to your local machine:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --single-branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:zeddy-go/quickstart.git</span></span></code></pre></div><p>In this example, the directory structure is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>â”œâ”€â”€ config                                // Configuration</span></span>
<span class="line"><span>â”‚   â”œâ”€â”€ config.go</span></span>
<span class="line"><span>â”‚   â””â”€â”€ config.yaml</span></span>
<span class="line"><span>â”œâ”€â”€ docker-compose.yaml                   // This example uses Docker to start the MySQL database</span></span>
<span class="line"><span>â”œâ”€â”€ go.mod</span></span>
<span class="line"><span>â”œâ”€â”€ go.sum</span></span>
<span class="line"><span>â”œâ”€â”€ main.go                               // Entry file</span></span>
<span class="line"><span>â””â”€â”€ module</span></span>
<span class="line"><span>    â””â”€â”€ user</span></span>
<span class="line"><span>        â”œâ”€â”€ domain                        // Domain layer</span></span>
<span class="line"><span>        â”‚         â”œâ”€â”€ contract.go         // Some interfaces</span></span>
<span class="line"><span>        â”‚         â”œâ”€â”€ svc                 // Services</span></span>
<span class="line"><span>        â”‚         â”‚     â””â”€â”€ user.go</span></span>
<span class="line"><span>        â”‚         â””â”€â”€ user.go             // Domain entity</span></span>
<span class="line"><span>        â”œâ”€â”€ iface                         // Interface layer</span></span>
<span class="line"><span>        â”‚         â””â”€â”€ http</span></span>
<span class="line"><span>        â”‚               â”œâ”€â”€ payload.go</span></span>
<span class="line"><span>        â”‚               â””â”€â”€ user.go       // User handler</span></span>
<span class="line"><span>        â”œâ”€â”€ infra</span></span>
<span class="line"><span>        â”‚         â”œâ”€â”€ migration           // Migration</span></span>
<span class="line"><span>        â”‚         â”‚     â”œâ”€â”€ 20240408063653_create_users_table.down.sql</span></span>
<span class="line"><span>        â”‚         â”‚     â”œâ”€â”€ 20240408063653_create_users_table.up.sql</span></span>
<span class="line"><span>        â”‚         â”‚     â””â”€â”€ migration.go</span></span>
<span class="line"><span>        â”‚         â”œâ”€â”€ model               // Data model</span></span>
<span class="line"><span>        â”‚         â”‚     â””â”€â”€ user.go</span></span>
<span class="line"><span>        â”‚         â”œâ”€â”€ repo                // Repository</span></span>
<span class="line"><span>        â”‚         â”‚     â””â”€â”€ user.go</span></span>
<span class="line"><span>        â”‚         â””â”€â”€ seed                // Data seeding</span></span>
<span class="line"><span>        â”‚               â””â”€â”€ user.go</span></span>
<span class="line"><span>        â””â”€â”€ module.go                     // Module entry</span></span></code></pre></div><h2 id="data-operations" tabindex="-1">Data Operations <a class="header-anchor" href="#data-operations" aria-label="Permalink to &quot;Data Operations&quot;">â€‹</a></h2><p>In this example, the data model is similar to the domain entity, but in actual projects, a domain entity may also be composed of data from multiple data models. Business logic only uses domain entities, so when operating on data through a repository, the repository will help us with bidirectional conversion.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The repository has a simple conversion logic built-in, but it may not suffice for complex situations. In this case, you will need to define your own conversion logic.</p></div><h2 id="data-migration" tabindex="-1">Data Migration <a class="header-anchor" href="#data-migration" aria-label="Permalink to &quot;Data Migration&quot;">â€‹</a></h2><p>The built-in migration module of the framework uses the <code>github.com/golang-migrate/migrate</code> package to implement migrations. This also needs to be registered in the module entry (<code>module/user/module.go:41</code>). After the program starts, the database tables will be automatically created.</p><h2 id="data-seeding" tabindex="-1">Data Seeding <a class="header-anchor" href="#data-seeding" aria-label="Permalink to &quot;Data Seeding&quot;">â€‹</a></h2><p>The framework has built-in data seeding, which is quite simple in principle; it utilizes the container to execute functions. This also needs to be registered in the module entry (<code>module/user/module.go:42</code>). After the program starts, the data will be automatically seeded into the database.</p><h2 id="user-handler" tabindex="-1">User Handler <a class="header-anchor" href="#user-handler" aria-label="Permalink to &quot;User Handler&quot;">â€‹</a></h2><p>In the <code>user</code> handler, we have added two methods: one for creating a user and another for retrieving user information. Like the first example, we have also registered two new routes in <code>module.go</code>.</p><p>You will notice that these two new methods have a different number of return values compared to the methods in the first example. This is another feature of the framework: variable parameters and return values for each handler function.</p><p>The framework allows you to design your own parameters and return values for each handler function. For parameters, the framework will iterate through the parameter list, looking for objects in the container (dependency injection) or parsing request parameters. For return values, the framework will iterate through the return value list to decide how to return the response.</p><h2 id="adding-grpc-service" tabindex="-1">Adding gRPC Service <a class="header-anchor" href="#adding-grpc-service" aria-label="Permalink to &quot;Adding gRPC Service&quot;">â€‹</a></h2><p>Clone the code to your local machine:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --single-branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:zeddy-go/quickstart.git</span></span></code></pre></div><p>We add gRPC service on top of the previous project, allowing our service to handle both HTTP and gRPC, and also to demonstrate the characteristic of code reuse. Of course, if your project only requires gRPC, you can completely ignore the HTTP-related code.</p><p>The project directory structure is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>â”œâ”€â”€ conf</span></span>
<span class="line"><span>â”‚    â”œâ”€â”€ config.go</span></span>
<span class="line"><span>â”‚    â””â”€â”€ config.yaml</span></span>
<span class="line"><span>â”œâ”€â”€ docker-compose.yaml</span></span>
<span class="line"><span>â”œâ”€â”€ go.mod</span></span>
<span class="line"><span>â”œâ”€â”€ go.sum</span></span>
<span class="line"><span>â”œâ”€â”€ main.go</span></span>
<span class="line"><span>â”œâ”€â”€ module</span></span>
<span class="line"><span>â”‚       â””â”€â”€ user</span></span>
<span class="line"><span>â”‚             â”œâ”€â”€ domain</span></span>
<span class="line"><span>â”‚             â”‚       â”œâ”€â”€ contract.go</span></span>
<span class="line"><span>â”‚             â”‚       â”œâ”€â”€ svc</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â””â”€â”€ user.go</span></span>
<span class="line"><span>â”‚             â”‚       â””â”€â”€ user.go</span></span>
<span class="line"><span>â”‚             â”œâ”€â”€ iface</span></span>
<span class="line"><span>â”‚             â”‚       â”œâ”€â”€ grpc</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â””â”€â”€ user.go            // gRPC interface implementation</span></span>
<span class="line"><span>â”‚             â”‚       â””â”€â”€ http</span></span>
<span class="line"><span>â”‚             â”‚           â”œâ”€â”€ payload.go</span></span>
<span class="line"><span>â”‚             â”‚           â””â”€â”€ user.go</span></span>
<span class="line"><span>â”‚             â”œâ”€â”€ infra</span></span>
<span class="line"><span>â”‚             â”‚       â”œâ”€â”€ migration</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â”œâ”€â”€ 20240408063653_create_users_table.down.sql</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â”œâ”€â”€ 20240408063653_create_users_table.up.sql</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â””â”€â”€ migration.go</span></span>
<span class="line"><span>â”‚             â”‚       â”œâ”€â”€ model</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â””â”€â”€ user.go</span></span>
<span class="line"><span>â”‚             â”‚       â”œâ”€â”€ repo</span></span>
<span class="line"><span>â”‚             â”‚       â”‚     â””â”€â”€ user.go</span></span>
<span class="line"><span>â”‚             â”‚       â””â”€â”€ seed</span></span>
<span class="line"><span>â”‚             â”‚             â””â”€â”€ user.go</span></span>
<span class="line"><span>â”‚             â””â”€â”€ module.go</span></span>
<span class="line"><span>â”œâ”€â”€ pb                                             // Protocol Buffers (pb) files</span></span>
<span class="line"><span>â”‚    â”œâ”€â”€ user_grpc.pb.go</span></span>
<span class="line"><span>â”‚    â””â”€â”€ user.pb.go</span></span>
<span class="line"><span>â”œâ”€â”€ readme.md</span></span>
<span class="line"><span>â””â”€â”€ user.proto                                     // Protocol Buffers (proto) file</span></span></code></pre></div><p>In the <code>main.go</code> file, we add the built-in gRPC module (main.go:21). To register our own service, simply obtain the instantiated <code>*grpc.Server</code> from the container in the <code>module/user/module.go</code> file (module/user/module.go:44,module/user/module.go:65).Additionally, you can see that in the gRPC interface implementation file, we have reused the <code>userService</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can definitely solidify your frequently used code into framework modules.</p></div><p>Each object in the container defaults to a singleton pattern. Thanks to being resident in memory, instantiated objects will not be instantiated again, which is beneficial for execution efficiency.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>github.com/zeddy-go/zeddy/errx</code> package silently collects the error stack. You can use the following code to print it: <code>fmt.Printf(&quot;%#v&quot;, err)</code>. Moreover, this information will not be lost even after being transmitted via gRPC.</p></div>`,41),o=[t];function p(l,r,c,d,h,u){return a(),e("div",null,o)}const k=s(i,[["render",p]]);export{m as __pageData,k as default};
